name: Daily Package Updates

on:
  schedule:
    # Run at 3:00 AM UTC every day
    - cron: '0 3 * * *'
  workflow_dispatch:  # Allow manual triggers

jobs:
  update-dependencies:
    runs-on: ubuntu-latest
    outputs:
      update_success: ${{ steps.update.outputs.success }}
      update_output: ${{ steps.update.outputs.output }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
      
      - name: Update flake inputs
        id: update
        run: |
          if nix flake update; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "output=Successfully updated flake inputs" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "output=Failed to update flake inputs: $?" >> $GITHUB_OUTPUT
          fi
      
      - name: Validate flake
        id: validate
        if: steps.update.outputs.success == 'true'
        run: |
          # Check if the flake still evaluates after updates
          nix flake show

  test-updated-configs:
    needs: update-dependencies
    if: needs.update-dependencies.outputs.update_success == 'true'
    runs-on: ubuntu-latest
    outputs:
      desktop_success: ${{ steps.test-desktop.outputs.success }}
      server_success: ${{ steps.test-server.outputs.success }}
      homemanager_success: ${{ steps.test-homemanager.outputs.success }}
      failure_details: ${{ steps.collect-results.outputs.failure_details }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
      
      - name: Update flake inputs
        run: |
          nix flake update
      
      - name: Temporarily update hardware configurations for CI
        run: |
          # Replace real hardware configs with CI-compatible versions
          sed -i 's/^{/# Modified for CI testing\n{/' modules/hosts/desktop/hardware-configuration.nix
          sed -i 's/^  fileSystems."\/" =/  fileSystems."\/" = { device = "none"; fsType = "tmpfs"; }; # /' modules/hosts/desktop/hardware-configuration.nix
          sed -i 's/^  fileSystems."\/boot" =/  fileSystems."\/boot" = { device = "none"; fsType = "tmpfs"; }; # /' modules/hosts/desktop/hardware-configuration.nix
          sed -i 's/^  swapDevices =/  swapDevices = [ ]; # /' modules/hosts/desktop/hardware-configuration.nix
          
          sed -i 's/^{/# Modified for CI testing\n{/' modules/hosts/server/hardware-configuration.nix
          sed -i 's/^  fileSystems."\/" =/  fileSystems."\/" = { device = "none"; fsType = "tmpfs"; }; # /' modules/hosts/server/hardware-configuration.nix
          sed -i 's/^  fileSystems."\/boot" =/  fileSystems."\/boot" = { device = "none"; fsType = "tmpfs"; }; # /' modules/hosts/server/hardware-configuration.nix
          sed -i 's/^  fileSystems."\/mnt\/media" =/  fileSystems."\/mnt\/media" = { device = "none"; fsType = "tmpfs"; options = [ "defaults" "nofail" ]; }; # /' modules/hosts/server/hardware-configuration.nix
          sed -i 's/^  swapDevices =/  swapDevices = [ ]; # /' modules/hosts/server/hardware-configuration.nix
      
      - name: Test desktop configuration
        id: test-desktop
        run: |
          # Test if desktop config still builds after updates
          if nix build .#nixosConfigurations.desktop.config.system.build.toplevel --dry-run --allow-import-from-derivation; then
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "::error::Desktop configuration build failed"
          fi
      
      - name: Test server configuration
        id: test-server
        run: |
          # Test if server config still builds after updates
          if nix build .#nixosConfigurations.server.config.system.build.toplevel --dry-run --allow-import-from-derivation; then
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "::error::Server configuration build failed"
          fi
      
      - name: Test home-manager configuration
        id: test-homemanager
        run: |
          # Test if home-manager config still builds
          if nix build .#homeConfigurations.chromeos.activationPackage --dry-run --impure; then
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "::error::Home Manager configuration build failed"
          fi
      
      - name: Collect test results
        id: collect-results
        run: |
          DETAILS=""
          if [[ "${{ steps.test-desktop.outputs.success }}" == "false" ]]; then
            DETAILS="${DETAILS}- Desktop configuration build failed\n"
          fi
          if [[ "${{ steps.test-server.outputs.success }}" == "false" ]]; then
            DETAILS="${DETAILS}- Server configuration build failed\n"
          fi
          if [[ "${{ steps.test-homemanager.outputs.success }}" == "false" ]]; then
            DETAILS="${DETAILS}- Home Manager configuration build failed\n"
          fi
          
          echo "failure_details<<EOF" >> $GITHUB_OUTPUT
          echo -e "$DETAILS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  create-update-pr:
    needs: test-updated-configs
    if: |
      (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') &&
      needs.test-updated-configs.outputs.desktop_success == 'true' &&
      needs.test-updated-configs.outputs.server_success == 'true' &&
      needs.test-updated-configs.outputs.homemanager_success == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
      
      - name: Update flake inputs
        run: |
          nix flake update
      
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: automated package updates"
          title: "Automated Package Updates"
          body: |
            ## Automated Package Updates
            
            This PR updates all flake inputs to their latest versions.
            
            ### Changes
            - Updated flake.lock with latest dependencies
            - All tests passing with updated packages
            
            This PR was automatically generated by the daily update workflow.
          branch: automated-updates
          branch-suffix: timestamp
          delete-branch: true
          labels: |
            automated
            dependencies

  create-issue-on-failure:
    needs: [update-dependencies, test-updated-configs]
    if: |
      (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') &&
      (needs.update-dependencies.outputs.update_success != 'true' ||
       needs.test-updated-configs.outputs.desktop_success != 'true' ||
       needs.test-updated-configs.outputs.server_success != 'true' ||
       needs.test-updated-configs.outputs.homemanager_success != 'true')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Determine failure reason
        id: failure-reason
        run: |
          TYPE=""
          ERROR_DETAILS=""
          
          if [[ "${{ needs.update-dependencies.outputs.update_success }}" != "true" ]]; then
            TYPE="Failed to update flake"
            ERROR_DETAILS="Error: ${{ needs.update-dependencies.outputs.update_output }}"
            FLAKE_STATUS="- [x] Flake update"
            DESKTOP_STATUS="- [ ] Desktop configuration"
            SERVER_STATUS="- [ ] Server configuration"
            HOME_STATUS="- [ ] Home Manager configuration"
          else
            TYPE="Tests failed with updated packages"
            ERROR_DETAILS="${{ needs.test-updated-configs.outputs.failure_details }}"
            FLAKE_STATUS="- [ ] Flake update"
            
            if [[ "${{ needs.test-updated-configs.outputs.desktop_success }}" != "true" ]]; then
              DESKTOP_STATUS="- [x] Desktop configuration"
            else
              DESKTOP_STATUS="- [ ] Desktop configuration"
            fi
            
            if [[ "${{ needs.test-updated-configs.outputs.server_success }}" != "true" ]]; then
              SERVER_STATUS="- [x] Server configuration"
            else
              SERVER_STATUS="- [ ] Server configuration"
            fi
            
            if [[ "${{ needs.test-updated-configs.outputs.homemanager_success }}" != "true" ]]; then
              HOME_STATUS="- [x] Home Manager configuration"
            else
              HOME_STATUS="- [ ] Home Manager configuration"
            fi
          fi
          
          echo "failure_type=$TYPE" >> $GITHUB_OUTPUT
          echo "error_details<<EOF" >> $GITHUB_OUTPUT
          echo -e "$ERROR_DETAILS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "flake_status=$FLAKE_STATUS" >> $GITHUB_OUTPUT
          echo "desktop_status=$DESKTOP_STATUS" >> $GITHUB_OUTPUT
          echo "server_status=$SERVER_STATUS" >> $GITHUB_OUTPUT
          echo "home_status=$HOME_STATUS" >> $GITHUB_OUTPUT
      
      - name: Create Issue
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          failure_type: ${{ steps.failure-reason.outputs.failure_type }}
          error_details: ${{ steps.failure-reason.outputs.error_details }}
          flake_status: ${{ steps.failure-reason.outputs.flake_status }}
          desktop_status: ${{ steps.failure-reason.outputs.desktop_status }}
          server_status: ${{ steps.failure-reason.outputs.server_status }}
          home_status: ${{ steps.failure-reason.outputs.home_status }}
        with:
          filename: .github/ISSUE_TEMPLATE/package-update-failure.md
          search_existing: open
