name: Claude Issue Responder

on:
  issues:
    types: [opened, edited]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to process'
        required: true
        type: number

jobs:
  process-issue:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Nix
        uses: cachix/install-nix-action@v22
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up environment
        run: |
          echo "ISSUE_NUMBER=${{ github.event.issue.number || github.event.inputs.issue_number }}" >> $GITHUB_ENV
          echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" >> $GITHUB_ENV
          
      - name: Install Claude CLI
        run: |
          pip install anthropic
          pip install anthropic-claude-cli

      - name: Get issue details
        id: issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: process.env.ISSUE_NUMBER
            });
            
            const title = issue.data.title;
            const body = issue.data.body;
            const labels = issue.data.labels.map(l => l.name);
            
            return {
              title,
              body,
              labels,
              should_process: labels.includes('claude-autofix')
            };
      
      - name: Create branch for fix
        if: fromJSON(steps.issue.outputs.result).should_process
        run: |
          ISSUE_NUMBER=${{ env.ISSUE_NUMBER }}
          BRANCH_NAME="claude-fix-issue-${ISSUE_NUMBER}"
          git config user.name "Claude Bot"
          git config user.email "noreply@anthropic.com"
          git checkout -b $BRANCH_NAME
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Process issue with Claude
        if: fromJSON(steps.issue.outputs.result).should_process
        id: claude_response
        run: |
          ISSUE_TITLE="${{ fromJSON(steps.issue.outputs.result).title }}"
          ISSUE_BODY="${{ fromJSON(steps.issue.outputs.result).body }}"
          
          # Create prompt for Claude
          cat > prompt.txt << EOL
          You are an AI assistant helping with a NixOS configuration repository.
          
          Your task is to analyze this GitHub issue and generate code to fix it:
          
          Issue Title: $ISSUE_TITLE
          
          Issue Description:
          $ISSUE_BODY
          
          Please:
          1. Analyze the issue and determine what files need to be modified
          2. Make the necessary changes to fix the issue
          3. Create a summary of changes you've made
          
          Format your response as:
          
          <analysis>
          Your analysis of the issue here...
          </analysis>
          
          <changes>
          File: path/to/file1
          ```nix
          modified content of file1
          ```
          
          File: path/to/file2
          ```nix
          modified content of file2
          ```
          </changes>
          
          <summary>
          Brief summary of changes for commit message and PR description
          </summary>
          EOL
          
          # Run claude with the prompt
          CLAUDE_RESPONSE=$(claude prompt.txt)
          
          # Extract and apply changes
          CHANGES=$(echo "$CLAUDE_RESPONSE" | sed -n '/<changes>/,/<\/changes>/p' | sed '1d;$d')
          echo "$CHANGES" > changes.txt
          
          # Extract summary
          SUMMARY=$(echo "$CLAUDE_RESPONSE" | sed -n '/<summary>/,/<\/summary>/p' | sed '1d;$d')
          echo "$SUMMARY" > summary.txt
          
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          cat summary.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Apply changes
        if: fromJSON(steps.issue.outputs.result).should_process
        run: |
          # Parse changes file and apply modifications
          FILE_PATTERN="File: "
          CURRENT_FILE=""
          mkdir -p temp_files
          
          while IFS= read -r line; do
            if [[ $line == $FILE_PATTERN* ]]; then
              # New file detected
              CURRENT_FILE=$(echo "$line" | sed "s/$FILE_PATTERN//")
              mkdir -p "$(dirname "$CURRENT_FILE")"
              touch "temp_files/$CURRENT_FILE"
              COLLECTING=false
            elif [[ $line == \`\`\`* ]]; then
              # Toggle code block collection
              if [ "$COLLECTING" = true ]; then
                COLLECTING=false
              else
                COLLECTING=true
                continue
              fi
            elif [ "$COLLECTING" = true ]; then
              # Append content to the current file
              echo "$line" >> "temp_files/$CURRENT_FILE"
            fi
          done < changes.txt
          
          # Copy the temporary files to their actual locations
          find temp_files -type f | while read -r file; do
            DEST_FILE="${file#temp_files/}"
            mkdir -p "$(dirname "$DEST_FILE")"
            cp "$file" "$DEST_FILE"
          done
          
          # Check if any files were changed
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "Fix issue #${{ env.ISSUE_NUMBER }}: $(cat summary.txt | head -n 1)
            
            ðŸ¤– Generated with Claude
            
            Co-Authored-By: Claude <noreply@anthropic.com>"
            git push origin ${{ env.BRANCH_NAME }}
            echo "CHANGES_MADE=true" >> $GITHUB_ENV
          else
            echo "No changes were made"
            echo "CHANGES_MADE=false" >> $GITHUB_ENV
          fi

      - name: Create Pull Request
        if: env.CHANGES_MADE == 'true' && fromJSON(steps.issue.outputs.result).should_process
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('summary.txt', 'utf8');
            
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Fix #${{ env.ISSUE_NUMBER }}: ${summary.split('\n')[0]}`,
              body: `## Automated fix for issue #${{ env.ISSUE_NUMBER }}

            ${summary}
            
            This PR was automatically generated by Claude to address the issue.
            Please review the changes carefully before merging.
            
            Fixes #${{ env.ISSUE_NUMBER }}
            
            ðŸ¤– Generated with Claude`,
              head: '${{ env.BRANCH_NAME }}',
              base: 'main'
            });
            
            // Add comment to the issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: process.env.ISSUE_NUMBER,
              body: `I've created a pull request to address this issue: ${pr.data.html_url}`
            });