name: Claude Issue Responder

on:
  issues:
    types: [opened, edited]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to process'
        required: true
        type: number

jobs:
  process-issue:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Nix
        uses: cachix/install-nix-action@v22
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up environment
        run: |
          echo "ISSUE_NUMBER=${{ github.event.issue.number || github.event.inputs.issue_number }}" >> $GITHUB_ENV
          echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" >> $GITHUB_ENV
          
      - name: Install Python dependencies
        run: |
          pip install anthropic
          pip install requests

      - name: Get issue details
        id: issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: process.env.ISSUE_NUMBER
            });
            
            const title = issue.data.title;
            const body = issue.data.body;
            const labels = issue.data.labels.map(l => l.name);
            
            return {
              title,
              body,
              labels,
              should_process: labels.includes('claude-autofix')
            };
      
      - name: Create branch for fix
        if: fromJSON(steps.issue.outputs.result).should_process
        run: |
          ISSUE_NUMBER=${{ env.ISSUE_NUMBER }}
          BRANCH_NAME="claude-fix-issue-${ISSUE_NUMBER}"
          git config user.name "Claude Bot"
          git config user.email "noreply@anthropic.com"
          git checkout -b $BRANCH_NAME
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Gather Repository Context
        if: fromJSON(steps.issue.outputs.result).should_process
        id: repo_context
        run: |
          # Get repository structure
          echo "Getting repository structure..."
          find . -type f -not -path '*/\.git/*' -not -path '*/node_modules/*' | sort > repo_structure.txt
          
          # Get recent commits
          echo "Getting recent commit history..."
          git log --max-count=10 --oneline > recent_commits.txt
          
          # Look for relevant config files
          echo "Gathering configuration files..."
          find . -name "*.nix" -not -path '*/\.git/*' | head -n 20 > nix_files.txt
          
          # Read important files for context
          mkdir -p context_files
          echo "Reading key configuration files..."
          
          # Read README
          if [ -f "README.md" ]; then
            cat README.md > context_files/README.md
          fi
          
          # Read flake.nix
          if [ -f "flake.nix" ]; then
            cat flake.nix > context_files/flake.nix
          fi
          
          # Read CLAUDE.md if exists (contains codebase conventions)
          if [ -f "CLAUDE.md" ]; then
            cat CLAUDE.md > context_files/CLAUDE.md
          fi
          
      - name: Process issue with Claude
        if: fromJSON(steps.issue.outputs.result).should_process
        id: claude_response
        run: |
          ISSUE_TITLE="${{ fromJSON(steps.issue.outputs.result).title }}"
          ISSUE_BODY="${{ fromJSON(steps.issue.outputs.result).body }}"
          
          # Create comprehensive prompt for Claude that simulates Claude Code capabilities
          cat > prompt.txt << EOL
          You are Claude, an advanced AI assistant from Anthropic, emulating the capabilities of Claude Code.
          
          # Repository Context
          You're working in a NixOS configuration repository with these characteristics:
          - The repository contains NixOS configuration files for multiple platforms
          - It uses the Nix language and follows NixOS conventions
          - It's organized with modular configurations for different hosts and use cases
          
          # Repository Structure
          $(head -n 50 repo_structure.txt)
          ...(truncated for brevity)
          
          # Recent Commits
          $(cat recent_commits.txt)
          
          # Relevant Configuration Files
          $(cat nix_files.txt)
          
          # Key File Contents
          
          $(if [ -f "context_files/README.md" ]; then
            echo "## README.md"
            echo '```markdown'
            cat context_files/README.md
            echo '```'
          fi)
          
          $(if [ -f "context_files/flake.nix" ]; then
            echo "## flake.nix"
            echo '```nix'
            cat context_files/flake.nix
            echo '```'
          fi)
          
          $(if [ -f "context_files/CLAUDE.md" ]; then
            echo "## CLAUDE.md (Code style and conventions)"
            echo '```markdown'
            cat context_files/CLAUDE.md
            echo '```'
          fi)
          
          # Current Issue to Solve
          ## Issue Title: $ISSUE_TITLE
          
          ## Issue Description:
          $ISSUE_BODY
          
          # Your Task
          You need to:
          1. Analyze the issue and determine what files need to be modified
          2. Think step by step about what code changes would fix the issue
          3. Propose specific, well-formatted code changes
          4. Write a clear summary of your changes
          
          # Response Format
          Structure your response in these sections:
          
          <analysis>
          Your detailed analysis of the issue, including:
          - What is the root problem?
          - Which files need to be modified?
          - What approach will you take to fix it?
          - Any potential edge cases or concerns?
          </analysis>
          
          <changes>
          File: path/to/file1
          \`\`\`nix
          // Complete file content with your changes
          \`\`\`
          
          File: path/to/file2
          \`\`\`nix
          // Complete file content with your changes
          \`\`\`
          </changes>
          
          <summary>
          A concise summary of the changes you've made, suitable for a commit message and PR description.
          Include the purpose and impact of your changes.
          </summary>
          EOL
          
          # Create Python script to call Anthropic API
          cat > call_claude.py << EOL
import anthropic
import os
import sys
import json
import time

def call_claude_with_retry(prompt_content, max_retries=3):
    client = anthropic.Anthropic(api_key=os.environ["ANTHROPIC_API_KEY"])
    
    for attempt in range(max_retries):
        try:
            message = client.messages.create(
                model="claude-3-opus-20240229",
                max_tokens=4000,
                temperature=0.1,
                system="You are Claude, a highly capable AI assistant simulating Claude Code. You analyze GitHub issues and generate precise file changes to fix them. Your focus is on understanding repository context and providing accurate, production-ready code changes.",
                messages=[
                    {"role": "user", "content": prompt_content}
                ]
            )
            return message.content[0].text
        except Exception as e:
            print(f"Error calling Claude API (attempt {attempt+1}/{max_retries}): {str(e)}")
            if attempt < max_retries - 1:
                # Exponential backoff: 2, 4, 8 seconds
                sleep_time = 2 ** (attempt + 1)
                print(f"Retrying in {sleep_time} seconds...")
                time.sleep(sleep_time)
            else:
                raise e

# Main execution
try:
    with open(sys.argv[1], 'r') as f:
        prompt_content = f.read()
    
    response = call_claude_with_retry(prompt_content)
    print(response)
except Exception as e:
    print(f"ERROR: {str(e)}")
    sys.exit(1)
EOL

          # Run the Python script to get Claude's response
          echo "Calling Claude API to analyze the issue..."
          CLAUDE_RESPONSE=$(python3 call_claude.py prompt.txt)
          
          # Check if the response was successful
          if [[ $? -ne 0 ]]; then
            echo "Error: Failed to get a valid response from Claude API"
            exit 1
          fi
          
          # Save full response for debugging
          echo "$CLAUDE_RESPONSE" > full_response.txt
          
          # Extract and apply changes
          echo "Extracting proposed code changes..."
          CHANGES=$(echo "$CLAUDE_RESPONSE" | sed -n '/<changes>/,/<\/changes>/p' | sed '1d;$d')
          if [[ -z "$CHANGES" ]]; then
            echo "Error: Could not extract changes from Claude's response"
            echo "Full response:"
            cat full_response.txt
            exit 1
          fi
          echo "$CHANGES" > changes.txt
          
          # Extract summary
          echo "Extracting summary of changes..."
          SUMMARY=$(echo "$CLAUDE_RESPONSE" | sed -n '/<summary>/,/<\/summary>/p' | sed '1d;$d')
          if [[ -z "$SUMMARY" ]]; then
            echo "Error: Could not extract summary from Claude's response"
            exit 1
          fi
          echo "$SUMMARY" > summary.txt
          
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          cat summary.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Apply changes
        if: fromJSON(steps.issue.outputs.result).should_process
        run: |
          # Parse changes file and apply modifications
          FILE_PATTERN="File: "
          CURRENT_FILE=""
          mkdir -p temp_files
          
          while IFS= read -r line; do
            if [[ $line == $FILE_PATTERN* ]]; then
              # New file detected
              CURRENT_FILE=$(echo "$line" | sed "s/$FILE_PATTERN//")
              mkdir -p "$(dirname "$CURRENT_FILE")"
              touch "temp_files/$CURRENT_FILE"
              COLLECTING=false
            elif [[ $line == \`\`\`* ]]; then
              # Toggle code block collection
              if [ "$COLLECTING" = true ]; then
                COLLECTING=false
              else
                COLLECTING=true
                continue
              fi
            elif [ "$COLLECTING" = true ]; then
              # Append content to the current file
              echo "$line" >> "temp_files/$CURRENT_FILE"
            fi
          done < changes.txt
          
          # Copy the temporary files to their actual locations
          find temp_files -type f | while read -r file; do
            DEST_FILE="${file#temp_files/}"
            mkdir -p "$(dirname "$DEST_FILE")"
            cp "$file" "$DEST_FILE"
          done
          
          # Check if any files were changed
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "Fix issue #${{ env.ISSUE_NUMBER }}: $(cat summary.txt | head -n 1)
            
            🤖 Generated by Claude AI with repository context analysis
            
            Co-Authored-By: Claude <noreply@anthropic.com>"
            git push origin ${{ env.BRANCH_NAME }}
            echo "CHANGES_MADE=true" >> $GITHUB_ENV
          else
            echo "No changes were made"
            echo "CHANGES_MADE=false" >> $GITHUB_ENV
          fi

      - name: Create Pull Request
        if: env.CHANGES_MADE == 'true' && fromJSON(steps.issue.outputs.result).should_process
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('summary.txt', 'utf8');
            
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Fix #${{ env.ISSUE_NUMBER }}: ${summary.split('\n')[0]}`,
              body: `## Automated fix for issue #${{ env.ISSUE_NUMBER }}

            ${summary}
            
            This PR was automatically generated by Claude in response to the claude-autofix label.
            Claude analyzed the repository context and issue description to propose this solution.
            Please review the changes carefully before merging.
            
            Fixes #${{ env.ISSUE_NUMBER }}
            
            🤖 Generated with Claude AI using repository context simulation`,
              head: '${{ env.BRANCH_NAME }}',
              base: 'main'
            });
            
            // Add comment to the issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: process.env.ISSUE_NUMBER,
              body: `I've created a pull request to address this issue: ${pr.data.html_url}`
            });