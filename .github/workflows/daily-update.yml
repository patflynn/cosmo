name: Daily Package Updates
# This workflow can be run in test mode via workflow_dispatch to verify issue creation.
# Use the test_mode input to force the issue creation and skip PR creation.

on:
  schedule:
    # Run at 3:00 AM UTC every day
    - cron: '0 3 * * *'
  workflow_dispatch:  # Allow manual triggers
    inputs:
      test_mode:
        description: 'Run in test mode (skips PR creation and forces issue creation)'
        required: false
        type: boolean
        default: false

jobs:
  update-dependencies:
    runs-on: ubuntu-latest
    outputs:
      update_success: ${{ steps.update.outputs.success }}
      update_output: ${{ steps.update.outputs.output }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
      
      - name: Update flake inputs
        id: update
        run: |
          if nix flake update; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "output=Successfully updated flake inputs" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "output=Failed to update flake inputs: $?" >> $GITHUB_OUTPUT
          fi
      
      - name: Validate flake
        id: validate
        if: steps.update.outputs.success == 'true'
        run: |
          # Check if the flake still evaluates after updates
          nix flake show

  test-updated-configs:
    needs: update-dependencies
    if: needs.update-dependencies.outputs.update_success == 'true'
    runs-on: ubuntu-latest
    outputs:
      desktop_success: ${{ steps.test-desktop.outputs.success }}
      server_success: ${{ steps.test-server.outputs.success }}
      homemanager_success: ${{ steps.test-homemanager.outputs.success }}
      failure_details: ${{ steps.collect-results.outputs.failure_details }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
      
      - name: Update flake inputs
        run: |
          nix flake update
      
      - name: Temporarily update hardware configurations for CI
        run: |
          # Replace real hardware configs with CI-compatible versions
          sed -i 's/^{/# Modified for CI testing\n{/' modules/hosts/desktop/hardware-configuration.nix
          sed -i 's/^  fileSystems."\/" =/  fileSystems."\/" = { device = "none"; fsType = "tmpfs"; }; # /' modules/hosts/desktop/hardware-configuration.nix
          sed -i 's/^  fileSystems."\/boot" =/  fileSystems."\/boot" = { device = "none"; fsType = "tmpfs"; }; # /' modules/hosts/desktop/hardware-configuration.nix
          sed -i 's/^  swapDevices =/  swapDevices = [ ]; # /' modules/hosts/desktop/hardware-configuration.nix
          
          sed -i 's/^{/# Modified for CI testing\n{/' modules/hosts/server/hardware-configuration.nix
          sed -i 's/^  fileSystems."\/" =/  fileSystems."\/" = { device = "none"; fsType = "tmpfs"; }; # /' modules/hosts/server/hardware-configuration.nix
          sed -i 's/^  fileSystems."\/boot" =/  fileSystems."\/boot" = { device = "none"; fsType = "tmpfs"; }; # /' modules/hosts/server/hardware-configuration.nix
          sed -i 's/^  fileSystems."\/mnt\/media" =/  fileSystems."\/mnt\/media" = { device = "none"; fsType = "tmpfs"; options = [ "defaults" "nofail" ]; }; # /' modules/hosts/server/hardware-configuration.nix
          sed -i 's/^  swapDevices =/  swapDevices = [ ]; # /' modules/hosts/server/hardware-configuration.nix
      
      - name: Test desktop configuration
        id: test-desktop
        run: |
          # Test if desktop config still builds after updates
          if nix build .#nixosConfigurations.desktop.config.system.build.toplevel --dry-run --allow-import-from-derivation; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "desktop_error=" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "::error::Desktop configuration build failed"
            
            # Capture detailed error output
            ERROR_OUTPUT=$(nix build .#nixosConfigurations.desktop.config.system.build.toplevel --dry-run --allow-import-from-derivation --show-trace 2>&1 || true)
            echo "desktop_error<<EOF" >> $GITHUB_OUTPUT
            echo "$ERROR_OUTPUT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
      
      - name: Test server configuration
        id: test-server
        run: |
          # Test if server config still builds after updates
          if nix build .#nixosConfigurations.server.config.system.build.toplevel --dry-run --allow-import-from-derivation; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "server_error=" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "::error::Server configuration build failed"
            
            # Capture detailed error output
            ERROR_OUTPUT=$(nix build .#nixosConfigurations.server.config.system.build.toplevel --dry-run --allow-import-from-derivation --show-trace 2>&1 || true)
            echo "server_error<<EOF" >> $GITHUB_OUTPUT
            echo "$ERROR_OUTPUT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
      
      - name: Test home-manager configuration
        id: test-homemanager
        run: |
          # Test if home-manager config still builds
          if nix build .#homeConfigurations.chromeos.activationPackage --dry-run --impure; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "homemanager_error=" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "::error::Home Manager configuration build failed"
            
            # Capture detailed error output
            ERROR_OUTPUT=$(nix build .#homeConfigurations.chromeos.activationPackage --dry-run --impure --show-trace 2>&1 || true)
            echo "homemanager_error<<EOF" >> $GITHUB_OUTPUT
            echo "$ERROR_OUTPUT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
      
      - name: Collect test results
        id: collect-results
        run: |
          DETAILS=""
          if [[ "${{ steps.test-desktop.outputs.success }}" == "false" ]]; then
            DETAILS="${DETAILS}- Desktop configuration build failed\n"
          fi
          if [[ "${{ steps.test-server.outputs.success }}" == "false" ]]; then
            DETAILS="${DETAILS}- Server configuration build failed\n"
          fi
          if [[ "${{ steps.test-homemanager.outputs.success }}" == "false" ]]; then
            DETAILS="${DETAILS}- Home Manager configuration build failed\n"
          fi
          
          echo "failure_details<<EOF" >> $GITHUB_OUTPUT
          echo -e "$DETAILS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Analyze package changes
        id: analyze-changes
        if: |
          steps.test-desktop.outputs.success == 'false' ||
          steps.test-server.outputs.success == 'false' ||
          steps.test-homemanager.outputs.success == 'false'
        run: |
          # Analyze what changed in nixpkgs
          echo "===== Analyzing package changes =====" >> $GITHUB_STEP_SUMMARY
          
          # Get list of changed package versions that might affect our build
          echo "### Top-level package changes" >> $GITHUB_STEP_SUMMARY
          nix-instantiate --eval -E 'with import <nixpkgs> {}; lib.version' | tr -d '"' >> $GITHUB_STEP_SUMMARY
          
          # Look for specific packages we depend on
          echo "### Package change analysis" >> $GITHUB_STEP_SUMMARY
          
          # Capture detailed errors in env vars for issue creation
          echo "nixpkgs_version=$(nix-instantiate --eval -E 'with import <nixpkgs> {}; lib.version' | tr -d '"')" >> $GITHUB_ENV
          
          # Capture full diagnostic info including errors
          DIAGNOSTIC_INFO="## Nixpkgs Version\n$(nix-instantiate --eval -E 'with import <nixpkgs> {}; lib.version' | tr -d '"')\n\n"
          
          if [[ "${{ steps.test-desktop.outputs.success }}" == "false" ]]; then
            DIAGNOSTIC_INFO="${DIAGNOSTIC_INFO}## Desktop Configuration Error\n\`\`\`\n${{ steps.test-desktop.outputs.desktop_error }}\n\`\`\`\n\n"
          fi
          
          if [[ "${{ steps.test-server.outputs.success }}" == "false" ]]; then
            DIAGNOSTIC_INFO="${DIAGNOSTIC_INFO}## Server Configuration Error\n\`\`\`\n${{ steps.test-server.outputs.server_error }}\n\`\`\`\n\n"
          fi
          
          if [[ "${{ steps.test-homemanager.outputs.success }}" == "false" ]]; then
            DIAGNOSTIC_INFO="${DIAGNOSTIC_INFO}## Home Manager Error\n\`\`\`\n${{ steps.test-homemanager.outputs.homemanager_error }}\n\`\`\`\n\n"
          fi
          
          echo "diagnostic_info<<EOF" >> $GITHUB_ENV
          echo -e "$DIAGNOSTIC_INFO" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

  create-update-pr:
    needs: test-updated-configs
    if: |
      (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') &&
      needs.test-updated-configs.outputs.desktop_success == 'true' &&
      needs.test-updated-configs.outputs.server_success == 'true' &&
      needs.test-updated-configs.outputs.homemanager_success == 'true' &&
      inputs.test_mode != true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
      
      - name: Update flake inputs
        run: |
          nix flake update
      
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: automated package updates"
          title: "Automated Package Updates"
          body: |
            ## Automated Package Updates
            
            This PR updates all flake inputs to their latest versions.
            
            ### Changes
            - Updated flake.lock with latest dependencies
            - All tests passing with updated packages
            
            This PR was automatically generated by the daily update workflow.
          branch: automated-updates
          branch-suffix: timestamp
          delete-branch: true
          labels: |
            automated
            dependencies

  create-issue-on-failure:
    needs: [update-dependencies, test-updated-configs]
    if: |
      (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') &&
      (needs.update-dependencies.outputs.update_success != 'true' ||
       needs.test-updated-configs.outputs.desktop_success != 'true' ||
       needs.test-updated-configs.outputs.server_success != 'true' ||
       needs.test-updated-configs.outputs.homemanager_success != 'true' ||
       inputs.test_mode == true)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Determine failure reason
        id: failure-reason
        run: |
          if [[ "${{ inputs.test_mode }}" == "true" ]]; then
            echo "failure_type=Test Mode" >> $GITHUB_ENV
            echo "error_details=This is a test run to verify the issue creation functionality." >> $GITHUB_ENV
            echo "flake_status=- [x] Flake update (Test)" >> $GITHUB_ENV
            echo "desktop_status=- [x] Desktop configuration (Test)" >> $GITHUB_ENV
            echo "server_status=- [x] Server configuration (Test)" >> $GITHUB_ENV
            echo "home_status=- [x] Home Manager configuration (Test)" >> $GITHUB_ENV
            
            # Sample diagnostic info for test mode
            echo "diagnostic_info=## Test Mode Diagnostic Info\nThis is sample diagnostic information for test mode." >> $GITHUB_ENV
          elif [[ "${{ needs.update-dependencies.outputs.update_success }}" != "true" ]]; then
            echo "failure_type=Failed to update flake" >> $GITHUB_ENV
            echo "error_details=${{ needs.update-dependencies.outputs.update_output }}" >> $GITHUB_ENV
            echo "flake_status=- [x] Flake update" >> $GITHUB_ENV
            echo "desktop_status=- [ ] Desktop configuration" >> $GITHUB_ENV
            echo "server_status=- [ ] Server configuration" >> $GITHUB_ENV
            echo "home_status=- [ ] Home Manager configuration" >> $GITHUB_ENV
            
            # Basic diagnostic info for flake update failures
            echo "diagnostic_info<<EOF" >> $GITHUB_ENV
            echo "## Flake Update Error Details" >> $GITHUB_ENV
            echo "\`\`\`" >> $GITHUB_ENV
            echo "${{ needs.update-dependencies.outputs.update_output }}" >> $GITHUB_ENV
            echo "\`\`\`" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "failure_type=Tests failed with updated packages" >> $GITHUB_ENV
            echo "error_details<<EOF" >> $GITHUB_ENV
            echo "${{ needs.test-updated-configs.outputs.failure_details }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            echo "flake_status=- [ ] Flake update" >> $GITHUB_ENV
            
            if [[ "${{ needs.test-updated-configs.outputs.desktop_success }}" != "true" ]]; then
              echo "desktop_status=- [x] Desktop configuration" >> $GITHUB_ENV
            else
              echo "desktop_status=- [ ] Desktop configuration" >> $GITHUB_ENV
            fi
            
            if [[ "${{ needs.test-updated-configs.outputs.server_success }}" != "true" ]]; then
              echo "server_status=- [x] Server configuration" >> $GITHUB_ENV
            else
              echo "server_status=- [ ] Server configuration" >> $GITHUB_ENV
            fi
            
            if [[ "${{ needs.test-updated-configs.outputs.homemanager_success }}" != "true" ]]; then
              echo "home_status=- [x] Home Manager configuration" >> $GITHUB_ENV
            else
              echo "home_status=- [ ] Home Manager configuration" >> $GITHUB_ENV
            fi
            
            # The diagnostic_info will be set by the analyze-changes step
          fi
      
      - name: Create Issue
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          filename: .github/ISSUE_TEMPLATE/package-update-failure.md
          search_existing: open
